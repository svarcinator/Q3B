(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V1 () Bool)
(declare-fun W_S2_V1 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S2_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S2_V3 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S2_V4 () Bool)
(declare-fun W_S1_V5 () Bool)
(declare-fun W_S2_V5 () Bool)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S2_V6 () Bool)
(declare-fun R_S2_V1 () Bool)
(declare-fun R_S2_V2 () Bool)
(declare-fun R_S2_V3 () Bool)
(declare-fun R_S2_V4 () Bool)
(declare-fun R_S2_V5 () Bool)
(declare-fun R_S2_V6 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V6 () Bool)
(assert
 (forall
  ((V6_0 (_ BitVec 32)) (V5_0 (_ BitVec 32)) (V4_0 (_ BitVec 32)) 
   (V3_0 (_ BitVec 32)) (V2_0 (_ BitVec 32)) (V1_0 (_ BitVec 32)) 
   (S2_V2_!168 (_ BitVec 32)) (S2_V2_!181 (_ BitVec 32)) 
   (S2_V3_!167 (_ BitVec 32)) (S2_V3_!180 (_ BitVec 32)) 
   (S1_V5_!159 (_ BitVec 32)) (S1_V5_!172 (_ BitVec 32)) 
   (E1_!157 (_ BitVec 32)) (E1_!170 (_ BitVec 32)) 
   (E1_!183 (_ BitVec 32)) (S1_V4_!160 (_ BitVec 32)) 
   (S1_V4_!173 (_ BitVec 32)) (S2_V4_!166 (_ BitVec 32)) 
   (S2_V4_!179 (_ BitVec 32)) (S1_V6_!158 (_ BitVec 32)) 
   (S1_V6_!171 (_ BitVec 32)) (S2_V5_!165 (_ BitVec 32)) 
   (S2_V5_!178 (_ BitVec 32)) (S1_V1_!163 (_ BitVec 32)) 
   (S1_V1_!176 (_ BitVec 32)) (S2_V6_!164 (_ BitVec 32)) 
   (S2_V6_!177 (_ BitVec 32)) (S1_V3_!161 (_ BitVec 32)) 
   (S1_V3_!174 (_ BitVec 32)) (S1_V2_!162 (_ BitVec 32)) 
   (S1_V2_!175 (_ BitVec 32)) (S2_V1_!169 (_ BitVec 32)) 
   (S2_V1_!182 (_ BitVec 32)))
  (let ((?x2448 (ite W_S2_V1 S2_V1_!182 (ite W_S1_V1 S1_V1_!176 E1_!170))))
  (let ((?x2467 (ite W_S2_V2 S2_V2_!181 (ite W_S1_V2 S1_V2_!175 V2_0))))
  (let
  (($x2761
    (= (ite W_S2_V3 S2_V3_!167 (bvadd (_ bv1 32) (ite W_S1_V3 S1_V3_!161 V3_0)))
    (bvadd (ite W_S2_V3 S2_V3_!180 (ite W_S1_V3 S1_V3_!174 V3_0)) ?x2467
    (bvmul (bvneg (_ bv1 32)) E1_!183)))))
  (let ((?x2764 (ite W_S2_V4 S2_V4_!179 (ite W_S1_V4 S1_V4_!173 V4_0))))
  (let ((?x2773 (ite W_S2_V5 S2_V5_!178 (ite W_S1_V5 S1_V5_!172 V5_0))))
  (let ((?x2782 (ite W_S2_V6 S2_V6_!177 (ite W_S1_V6 S1_V6_!171 V6_0))))
  (let
  (($x2786
    (and (= (ite W_S2_V6 S2_V6_!164 (ite W_S1_V6 S1_V6_!158 V6_0)) ?x2782)
    (= (ite W_S2_V5 S2_V5_!165 (ite W_S1_V5 S1_V5_!159 V5_0)) ?x2773)
    (= (ite W_S2_V4 S2_V4_!166 (ite W_S1_V4 S1_V4_!160 V4_0)) ?x2764) $x2761
    (= (ite W_S2_V2 S2_V2_!168 (ite W_S1_V2 S1_V2_!162 V2_0)) ?x2467)
    (= (ite W_S2_V1 S2_V1_!169 (ite W_S1_V1 S1_V1_!163 E1_!157)) ?x2448))))
  (let
  (($x2797
    (bvsge (ite W_S2_V1 S2_V1_!169 (ite W_S1_V1 S1_V1_!163 E1_!157))
    (bvadd (bvneg (_ bv1 32)) (ite W_S2_V2 S2_V2_!168 (ite W_S1_V2 S1_V2_!162 V2_0))))))
  (let
  (($x2803
    (and (not (bvsle V2_0 E1_!157)) $x2797 
    (not (bvsle V2_0 E1_!170)) 
    (bvsge ?x2448 (bvadd (bvneg (_ bv1 32)) ?x2467)))))
  (let (($x580 (not R_S2_V1)))
  (let (($x577 (not R_S2_V2)))
  (let (($x575 (not R_S2_V3)))
  (let
  (($x2816
    (or $x575
    (= (ite W_S1_V3 S1_V3_!161 V3_0) (bvadd (bvneg (_ bv1 32)) (ite W_S1_V3 S1_V3_!174 V3_0))))))
  (let (($x573 (not R_S2_V4)))
  (let (($x571 (not R_S2_V5)))
  (let (($x569 (not R_S2_V6)))
  (let
  (($x2829
    (and
    (or $x569
    (= (ite W_S1_V6 S1_V6_!158 V6_0) (ite W_S1_V6 S1_V6_!171 V6_0)))
    (or $x571
    (= (ite W_S1_V5 S1_V5_!159 V5_0) (ite W_S1_V5 S1_V5_!172 V5_0)))
    (or $x573
    (= (ite W_S1_V4 S1_V4_!160 V4_0) (ite W_S1_V4 S1_V4_!173 V4_0))) $x2816
    (or $x577
    (= (ite W_S1_V2 S1_V2_!162 V2_0) (ite W_S1_V2 S1_V2_!175 V2_0)))
    (or $x580
    (= (ite W_S1_V1 S1_V1_!163 E1_!157) (ite W_S1_V1 S1_V1_!176 E1_!170))))))
  (let (($x2830 (not $x2829)))
  (let (($x481 (not R_E1_V3)))
  (let
  (($x2889
    (and (or (not R_E1_V6) (= ?x2782 V6_0))
    (or (not R_E1_V5) (= ?x2773 V5_0)) 
    (or (not R_E1_V4) (= ?x2764 V4_0))
    (or $x481
    (= (ite W_S2_V3 S2_V3_!180 (ite W_S1_V3 S1_V3_!174 V3_0)) V3_0))
    (or (not R_E1_V2) (= ?x2467 V2_0))
    (or (not R_E1_V1) (= ?x2448 (bvadd (bvneg (_ bv1 32)) V1_0))))))
  (let
  (($x2917
    (and (or (not R_E1_V6) (= V6_0 ?x2782))
    (or (not R_E1_V5) (= V5_0 ?x2773)) 
    (or (not R_E1_V4) (= V4_0 ?x2764))
    (or $x481
    (= V3_0 (ite W_S2_V3 S2_V3_!180 (ite W_S1_V3 S1_V3_!174 V3_0))))
    (or (not R_E1_V2) (= V2_0 ?x2467))
    (or (not R_E1_V1) (= V1_0 (bvadd (_ bv1 32) ?x2448))))))
  (let
  (($x2930
    (and (or $x2830 (= S2_V2_!168 S2_V2_!181))
    (or $x2830 (= S2_V3_!167 S2_V3_!180))
    (or (not (or (not R_S1_V1) (= E1_!170 E1_!157)))
    (= S1_V5_!172 S1_V5_!159)) 
    (= E1_!157 E1_!170) (or (not $x2917) (= E1_!157 E1_!183))
    (or (not $x2889) (= E1_!183 E1_!170))
    (or (not (or (not R_S1_V1) (= E1_!170 E1_!157)))
    (= S1_V4_!173 S1_V4_!160)) 
    (or $x2830 (= S2_V4_!166 S2_V4_!179))
    (or (not (or (not R_S1_V1) (= E1_!170 E1_!157)))
    (= S1_V6_!171 S1_V6_!158)) 
    (or $x2830 (= S2_V5_!165 S2_V5_!178))
    (or (not (or (not R_S1_V1) (= E1_!157 E1_!170)))
    (= S1_V1_!163 S1_V1_!176)) 
    (or $x2830 (= S2_V6_!164 S2_V6_!177))
    (or (not (or (not R_S1_V1) (= E1_!157 E1_!170)))
    (= S1_V3_!161 S1_V3_!174))
    (or (not (or (not R_S1_V1) (= E1_!170 E1_!157)))
    (= S1_V2_!175 S1_V2_!162)) 
    (or $x2830 (= S2_V1_!169 S2_V1_!182)))))
  (or (not $x2930) (not $x2803) $x2786)))))))))))))))))))))))))
(check-sat)
(exit)

