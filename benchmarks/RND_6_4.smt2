(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info :source |
   Scholl, Christoph; Disch, Stefan; Pigorsch, Florian and Kupferschmid, 
   Stefan; Using an SMT Solver and Craig Interpolation to Detect and Remove 
   Redundant Linear Constraints in Representations of Non-Convex Polyhedra.
   Proceedings of 6th International Workshop on Satisfiability Modulo
   Theories, Princeton, USA, July 2008.
   <http://abs.informatik.uni-freiburg.de/smtbench/>

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)
(declare-fun y1 () (_ BitVec 32))
(declare-fun y3 () (_ BitVec 32))
(declare-fun y4 () (_ BitVec 32))
(declare-fun y5 () (_ BitVec 32))
(declare-fun y6 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
(assert (forall ((?y1 (_ BitVec 32))) (or (forall ((?y3 (_ BitVec 32))) (exists ((?y4 (_ BitVec 32))) (or (or (or (forall ((?y5 (_ BitVec 32))) (forall ((?y6 (_ BitVec 32))) (bvslt (bvadd (bvadd (bvadd (bvadd (bvmul (_ bv30 32) ?y6) (bvmul (_ bv61 32) ?y5)) (bvmul (bvneg (_ bv94 32)) ?y4)) (bvmul (bvneg (_ bv60 32)) ?y1)) (bvmul (bvneg (_ bv22 32)) x1)) (_ bv49 32)))) (exists ((?y5 (_ BitVec 32))) (not (= (bvadd (bvadd (bvadd (bvmul (bvneg (_ bv81 32)) ?y5) (bvmul (_ bv33 32) ?y3)) (bvmul (_ bv51 32) ?y1)) (bvmul (bvneg (_ bv26 32)) x1)) (bvneg (_ bv60 32)))))) (forall ((?y6 (_ BitVec 32))) (let ((?v_0 (bvmul (bvneg (_ bv17 32)) ?y6))) (or (bvsle (bvadd (bvadd (bvadd ?v_0 (bvmul (bvneg (_ bv47 32)) ?y4)) (bvmul (bvneg (_ bv51 32)) ?y1)) (bvmul (bvneg (_ bv95 32)) x1)) (_ bv80 32)) (= (bvadd (bvadd (bvadd (bvadd ?v_0 (bvmul (_ bv98 32) ?y4)) (bvmul (bvneg (_ bv36 32)) ?y3)) (bvmul (_ bv7 32) ?y1)) (bvmul (_ bv42 32) x1)) (bvneg (_ bv94 32))))))) (and (exists ((?y5 (_ BitVec 32))) (forall ((?y6 (_ BitVec 32))) (and (bvsge (bvadd (bvadd (bvmul (_ bv36 32) ?y4) (bvmul (bvneg (_ bv17 32)) ?y3)) (bvmul (_ bv49 32) ?y1)) (_ bv0 32)) (bvsgt (bvadd (bvadd (bvadd (bvadd (bvmul (bvneg (_ bv23 32)) ?y6) (bvmul (bvneg (_ bv73 32)) ?y5)) (bvmul (_ bv5 32) ?y4)) (bvmul (bvneg (_ bv83 32)) ?y1)) (bvmul (bvneg (_ bv24 32)) x1)) (bvneg (_ bv55 32)))))) (and (exists ((?y5 (_ BitVec 32))) (forall ((?y6 (_ BitVec 32))) (bvslt (bvadd (bvadd (bvadd (bvmul (bvneg (_ bv40 32)) ?y4) (bvmul (bvneg (_ bv97 32)) ?y3)) (bvmul (bvneg (_ bv36 32)) ?y1)) (bvmul (_ bv83 32) x1)) (bvneg (_ bv59 32))))) (forall ((?y6 (_ BitVec 32))) (bvsle (bvadd (bvadd (bvmul (_ bv82 32) ?y6) (bvmul (_ bv27 32) ?y4)) (bvmul (_ bv89 32) ?y3)) (_ bv95 32)))))))) (or (or (and (or (forall ((?y5 (_ BitVec 32))) (bvsge (bvadd (bvmul (_ bv94 32) ?y5) (bvmul (bvneg (_ bv78 32)) ?y1)) (bvneg (_ bv8 32)))) (exists ((?y4 (_ BitVec 32))) (forall ((?y5 (_ BitVec 32))) (bvsge (bvadd (bvmul (_ bv24 32) ?y5) (bvmul (bvneg (_ bv2 32)) ?y4)) (_ bv76 32))))) (and (bvslt (bvadd (bvmul (_ bv24 32) ?y1) (bvmul (bvneg (_ bv35 32)) x1)) (bvneg (_ bv44 32))) (bvsgt (bvadd (bvmul (bvneg (_ bv44 32)) ?y1) (bvmul (bvneg (_ bv77 32)) x1)) (_ bv32 32)))) (exists ((?y4 (_ BitVec 32))) (and (and (= (bvadd (bvmul (bvneg (_ bv62 32)) ?y4) (bvmul (_ bv17 32) x1)) (_ bv12 32)) (not (= (bvadd (bvadd (bvmul (bvneg (_ bv22 32)) ?y4) (bvmul (bvneg (_ bv59 32)) ?y1)) (bvmul (_ bv7 32) x1)) (_ bv0 32)))) (forall ((?y6 (_ BitVec 32))) (bvsle (bvadd (bvadd (bvmul (_ bv45 32) ?y6) (bvmul (_ bv54 32) ?y4)) (bvmul (_ bv67 32) x1)) (bvneg (_ bv39 32))))))) (or (and (and (or (exists ((?y4 (_ BitVec 32))) (not (= (bvadd (bvadd (bvmul (_ bv16 32) ?y4) (bvmul (bvneg (_ bv64 32)) ?y1)) (bvmul (_ bv54 32) x1)) (_ bv63 32)))) (exists ((?y4 (_ BitVec 32))) (= (bvadd (bvadd (bvmul (bvneg (_ bv46 32)) ?y4) (bvmul (bvneg (_ bv80 32)) ?y1)) (bvmul (bvneg (_ bv53 32)) x1)) (_ bv50 32)))) (and (exists ((?y4 (_ BitVec 32))) (bvsgt (bvadd (bvmul (_ bv76 32) ?y4) (bvmul (bvneg (_ bv56 32)) ?y1)) (_ bv51 32))) (and (forall ((?y3 (_ BitVec 32))) (= (bvadd (bvadd (bvmul (bvneg (_ bv78 32)) ?y3) (bvmul (bvneg (_ bv78 32)) ?y1)) (bvmul (_ bv6 32) x1)) (_ bv39 32))) (not (= (bvadd (bvmul (bvneg (_ bv69 32)) ?y1) (bvmul (_ bv59 32) x1)) (_ bv0 32)))))) (forall ((?y3 (_ BitVec 32))) (or (or (forall ((?y4 (_ BitVec 32))) (bvsle (bvadd (bvadd (bvmul (_ bv17 32) ?y3) (bvmul (_ bv92 32) ?y1)) (bvmul (_ bv37 32) x1)) (_ bv0 32))) (forall ((?y4 (_ BitVec 32))) (bvslt (bvadd (bvadd (bvadd (bvmul (_ bv65 32) ?y4) (bvmul (_ bv73 32) ?y3)) (bvmul (bvneg (_ bv32 32)) ?y1)) (bvmul (bvneg (_ bv47 32)) x1)) (bvneg (_ bv74 32))))) (exists ((?y4 (_ BitVec 32))) (not (= (bvadd (bvmul (_ bv96 32) ?y4) (bvmul (bvneg (_ bv72 32)) x1)) (bvneg (_ bv3 32)))))))) (and (forall ((?y3 (_ BitVec 32))) (exists ((?y5 (_ BitVec 32))) (exists ((?y6 (_ BitVec 32))) (= (bvadd (bvadd (bvadd (bvadd (bvmul (bvneg (_ bv55 32)) ?y6) (bvmul (_ bv75 32) ?y5)) (bvmul (_ bv33 32) ?y3)) (bvmul (_ bv51 32) ?y1)) (bvmul (bvneg (_ bv76 32)) x1)) (_ bv0 32))))) (and (or (or (bvsge (bvmul (bvneg (_ bv73 32)) ?y1) (_ bv34 32)) (bvsgt (bvadd (bvmul (bvneg (_ bv60 32)) ?y1) (bvmul (_ bv3 32) x1)) (_ bv9 32))) (or (bvsgt (bvadd (bvmul (bvneg (_ bv12 32)) ?y1) (bvmul (bvneg (_ bv58 32)) x1)) (bvneg (_ bv87 32))) (bvsgt (bvadd (bvmul (bvneg (_ bv86 32)) ?y1) (bvmul (bvneg (_ bv37 32)) x1)) (_ bv0 32)))) (or (or (forall ((?y3 (_ BitVec 32))) (not (= (bvadd (bvmul (bvneg (_ bv45 32)) ?y3) (bvmul (bvneg (_ bv17 32)) x1)) (bvneg (_ bv67 32))))) (forall ((?y3 (_ BitVec 32))) (= (bvadd (bvmul (bvneg (_ bv19 32)) ?y1) (bvmul (_ bv20 32) x1)) (_ bv27 32)))) (forall ((?y3 (_ BitVec 32))) (bvsgt (bvadd (bvadd (bvmul (_ bv30 32) ?y3) (bvmul (_ bv17 32) ?y1)) (bvmul (bvneg (_ bv51 32)) x1)) (_ bv0 32)))))))))))
(check-sat)
(exit)
