(set-info :smt-lib-version 2.6)
(set-logic BV)
(set-info
  :source |
 Generated by PSyCO 0.1
 More info in N. P. Lopes and J. Monteiro. Weakest Precondition Synthesis for
 Compiler Optimizations, VMCAI'14.

Translated to BV by Mathias Preiner.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(assert
 (let
 (($x1171
   (forall
    ((V3_0 (_ BitVec 32)) (V2_0 (_ BitVec 32)) 
     (V4_0 (_ BitVec 32)) (MW_S1_V1 Bool) 
     (MW_S1_V3 Bool) (MW_S1_V2 Bool) 
     (MW_S1_V4 Bool) (S1_V3_!152 (_ BitVec 32)) 
     (S1_V3_!158 (_ BitVec 32)) (S1_V4_!154 (_ BitVec 32)) 
     (S1_V4_!160 (_ BitVec 32)) (S1_V1_!151 (_ BitVec 32)) 
     (S1_V1_!157 (_ BitVec 32)) (S1_V2_!153 (_ BitVec 32)) 
     (S1_V2_!159 (_ BitVec 32)) (E1_!150 (_ BitVec 32)) 
     (E1_!155 (_ BitVec 32)) (E1_!156 (_ BitVec 32)) 
     (E1_!161 (_ BitVec 32)))
    (let ((?x801 (ite MW_S1_V4 S1_V4_!160 V4_0)))
    (let (($x751 (= (ite MW_S1_V4 S1_V4_!154 V4_0) ?x801)))
    (let ((?x849 (ite MW_S1_V2 S1_V2_!159 V2_0)))
    (let ((?x850 (ite MW_S1_V2 S1_V2_!153 V2_0)))
    (let (($x848 (= ?x850 ?x849)))
    (let ((?x763 (ite MW_S1_V3 S1_V3_!158 V3_0)))
    (let (($x747 (= (ite MW_S1_V3 S1_V3_!152 V3_0) ?x763)))
    (let
    (($x817
      (and (not (bvsle V2_0 E1_!150))
      (bvsge (ite MW_S1_V1 S1_V1_!151 E1_!150) (bvadd (bvneg (_ bv1 32)) ?x850))
      (not (bvsle V2_0 E1_!155)) 
      (bvsge V2_0 (bvadd (_ bv1 32) E1_!156))
      (not (bvsle E1_!161 (bvadd (bvneg (_ bv1 32)) (ite MW_S1_V1 S1_V1_!157 (bvadd (bvneg (_ bv1 32)) V2_0))))))))
    (let (($x802 (or (not MW_S1_V4) W_S1_V4)))
    (let (($x754 (or (not MW_S1_V2) W_S1_V2)))
    (let (($x885 (or (not MW_S1_V1) W_S1_V1)))
    (let (($x1146 (= E1_!161 E1_!156)))
    (let (($x76 (not R_E1_V4)))
    (let (($x1070 (or $x76 (= ?x801 V4_0))))
    (let (($x74 (not R_E1_V2)))
    (let (($x555 (or $x74 (= ?x849 V2_0))))
    (let (($x72 (not R_E1_V3)))
    (let (($x1159 (or $x72 (= ?x763 V3_0))))
    (let (($x914 (not (and $x1159 $x555 $x1070))))
    (let (($x1173 (= E1_!155 E1_!156)))
    (let (($x1135 (= E1_!150 E1_!156)))
    (let (($x593 (= E1_!150 E1_!155)))
    (let (($x1221 (= S1_V2_!159 S1_V2_!153)))
    (let (($x1222 (= S1_V1_!151 S1_V1_!157)))
    (let (($x881 (= S1_V4_!160 S1_V4_!154)))
    (let (($x880 (= S1_V3_!152 S1_V3_!158)))
    (let
    (($x755
      (and (or (not (or (not R_S1_V1) (= E1_!150 (bvadd (bvneg (_ bv1 32)) V2_0)))) $x880)
      (or (not (or (not R_S1_V1) (= V2_0 (bvadd (_ bv1 32) E1_!150)))) $x881)
      (or (not (or (not R_S1_V1) (= E1_!150 (bvadd (bvneg (_ bv1 32)) V2_0)))) $x1222)
      (or (not (or (not R_S1_V1) (= V2_0 (bvadd (_ bv1 32) E1_!150)))) $x1221) $x593
      $x1135 $x1173 (or $x914 (= E1_!161 E1_!150))
      (or $x914 (= E1_!161 E1_!155)) 
      (or $x914 $x1146) $x885 $x754 $x802)))
    (or (not $x755) (not $x817)
    (and (= (ite MW_S1_V1 S1_V1_!151 E1_!150) (bvadd (bvneg (_ bv1 32)) ?x849)) $x747 $x848
    $x751))))))))))))))))))))))))))))))))
 (let
 (($x597 (not (or R_E1_V3 (and W_S1_V2 R_E1_V2) (and W_S1_V4 R_E1_V4)))))
 (let
 (($x37
   (or (and W_S1_V1 R_S1_V1) R_S1_V3 
   (and W_S1_V2 R_S1_V2) (and W_S1_V4 R_S1_V4))))
 (let (($x39 (= DISJ_W_S1_R_S1 (not $x37))))
 (let (($x70 (not R_E1_V1)))
 (and $x70 W_S1_V3 $x39 (= DISJ_W_S1_R_E1 $x597) $x1171)))))))
(assert (not (and (not W_S1_V2) DISJ_W_S1_R_S1 DISJ_W_S1_R_E1)))
(assert
 (let (($x522 (not W_S1_V2)))
 (let (($x518 (not W_S1_V1)))
 (let (($x1103 (and $x518 $x522))) (not $x1103)))))
(check-sat)
(exit)

